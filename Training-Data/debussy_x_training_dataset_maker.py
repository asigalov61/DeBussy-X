# -*- coding: utf-8 -*-
"""DeBussy_X_Training_Dataset_Maker.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yZOtMnbc3Ph8yDWuAhGgFjfICihwov4t

# DeBussy X Training Dataset Maker (ver. 1.0)

***

Powered by tegridy-tools: https://github.com/asigalov61/tegridy-tools

***

#### Project Los Angeles

#### Tegridy Code 2023

***

# (SETUP ENVIRONMENT)
"""

#@title Install all dependencies (run only once per session)

!git clone https://github.com/asigalov61/tegridy-tools
!pip install tqdm

#@title Import all needed modules

print('Loading needed modules. Please wait...')
import os

import math
import statistics
import random

from tqdm import tqdm

if not os.path.exists('/content/Dataset'):
    os.makedirs('/content/Dataset')

print('Loading TMIDIX module...')
os.chdir('/content/tegridy-tools/tegridy-tools')

import TMIDIX

print('Done!')

os.chdir('/content/')
print('Enjoy! :)')

"""# (DOWNLOAD SOURCE MIDI DATASET)"""

# Commented out IPython magic to ensure Python compatibility.
#@title Download a sample Solo Piano MIDI dataset (MAESTRO)

# %cd /content/Dataset/

!wget 'https://storage.googleapis.com/magentadata/datasets/maestro/v3.0.0/maestro-v3.0.0-midi.zip'
!unzip 'maestro-v3.0.0-midi.zip'
!rm 'maestro-v3.0.0-midi.zip'

# %cd /content/

"""# (FILE LIST)"""

#@title Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

#@title Save file list
###########

print('Loading MIDI files...')
print('This may take a while on a large dataset in particular.')

dataset_addr = "/content/Dataset"
# os.chdir(dataset_addr)
filez = list()
for (dirpath, dirnames, filenames) in os.walk(dataset_addr):
    filez += [os.path.join(dirpath, file) for file in filenames]
print('=' * 70)

if filez == []:
    print('Could not find any MIDI files. Please check Dataset dir...')
    print('=' * 70)

print('Randomizing file list...')
random.shuffle(filez)

TMIDIX.Tegridy_Any_Pickle_File_Writer(filez, '/content/drive/MyDrive/filez')

#@title Load file list
filez = TMIDIX.Tegridy_Any_Pickle_File_Reader('/content/drive/MyDrive/filez')

"""# (PROCESS)"""

#@title Process MIDIs with TMIDIX MIDI processor

print('=' * 70)
print('TMIDIX MIDI Processor')
print('=' * 70)
print('Starting up...')
print('=' * 70)

###########

START_FILE_NUMBER = 0
LAST_SAVED_BATCH_COUNT = 0

input_files_count = START_FILE_NUMBER
files_count = LAST_SAVED_BATCH_COUNT

melody_chords_f = []

stats = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

print('Processing MIDI files. Please wait...')
print('=' * 70)

for f in tqdm(filez[START_FILE_NUMBER:]):
    try:
        input_files_count += 1

        fn = os.path.basename(f)

        # Filtering out giant MIDIs
        file_size = os.path.getsize(f)

        if file_size < 200000:

          #=======================================================
          # START PROCESSING

          # Convering MIDI to ms score with MIDI.py module
          score = TMIDIX.midi2ms_score(open(f, 'rb').read())

          # INSTRUMENTS CONVERSION CYCLE
          events_matrix1 = []
          itrack = 1

          while itrack < len(score):
              for event in score[itrack]:         
                  if event[0] == 'note' and event[3] != 9:
                      events_matrix1.append(event)
              itrack += 1

          events_matrix1.sort(key=lambda x: x[1])
                          
          #=======================================================
          # PRE-PROCESSING

          if len(events_matrix1) > 0:

            # recalculating timings
            for e in events_matrix1:
                e[1] = int(e[1] / 8) # Max 2 seconds for start-times
                e[2] = int(e[2] / 16) # Max 4 seconds for durations

            # Sorting by pitch, then by start-time
            events_matrix1.sort(key=lambda x: x[4], reverse=True)
            events_matrix1.sort(key=lambda x: x[1])

            #=======================================================
            # FINAL PRE-PROCESSING

            melody_chords = []

            pe = events_matrix1[0]
      
            for e in events_matrix1:
              if e[1] >= 0 and e[2] > 0:

                # Cliping all values...
                time = max(0, min(255, e[1]-pe[1]))             
                dur = max(1, min(255, e[2]))
                cha = 0
                ptc = max(1, min(127, e[4]))
                
                # Writing final note 
                melody_chords.append([time, dur, ptc])
                
                stats[0] += 1

                pe = e

            if len([y for y in melody_chords if y[2] != 9]) > 12: # Filtering out tiny/bad MIDIs...

              times = [y[0] for y in melody_chords[12:]]
              avg_time = sum(times) / len(times)
                
              if avg_time < 96: # Filtering out bad MIDIs...
                
                    #=======================================================
                    # FINAL PROCESSING
                    #=======================================================
                    
                    cho = []
                    chords = []
                    
                    for m in melody_chords:
                        if m[0] == 0:
                            if m not in cho:
                                cho.append(m)
                        else:
                            if len(cho) > 0:
                                cho.sort(key=lambda x: x[2], reverse=True)
                                chords.append(cho)
                            cho = []
                            if m not in cho:
                                cho.append(m)
                                
                    if len(cho) > 0:
                        cho.sort(key=lambda x: x[2], reverse=True)
                        chords.append(cho)
                        
                    #=======================================================
                    # MAIN PROCESSING CYCLE
                    #=======================================================
                    
                    chords_count = 0
                    
                    melody_chords_f.extend([643]) # Zero token

                    for c in chords:
                        if len(chords) - chords_count == 200:
                            melody_chords_f.extend([642]) # Outro Token
                            
                        if len(c) == 1:
                            melody_chords_f.extend([640]) # Note
                        else:
                            melody_chords_f.extend([641]) # Chord
                            
                        time = c[0][0]
                        dur = c[0][1]
                        
                        melody_chords_f.extend([time, dur+256])
                        
                        for cc in c:
                            
                            ptc = cc[2]

                            melody_chords_f.extend([ptc+512])

                        chords_count += 1

                    #=======================================================
                    
                    # TOTAL DICTIONARY SIZE 644
                    
                    #=======================================================

                    # Processed files counter
                    files_count += 1

                    # Saving every 5000 processed files
                    if files_count % 2000 == 0:
                      print('SAVING !!!')
                      print('=' * 70)      
                      print('Saving processed files...')
                      print('=' * 70)
                      print('Data check:', min(melody_chords_f), '===', max(melody_chords_f), '===', len(list(set(melody_chords_f))), '===', len(melody_chords_f))
                      print('=' * 70)
                      print('Processed so far:', files_count, 'out of', input_files_count, '===', files_count / input_files_count, 'good files ratio')
                      print('=' * 70)
                      count = str(files_count)
                      TMIDIX.Tegridy_Any_Pickle_File_Writer(melody_chords_f, '/content/drive/MyDrive/Piano_INTs_'+count)
                      melody_chords_f = []
                      print('=' * 70)
        
    except KeyboardInterrupt:
        print('Saving current progress and quitting...')
        break  

    except Exception as ex:
        print('WARNING !!!')
        print('=' * 70)
        print('Bad MIDI:', f)
        print('Error detected:', ex)
        print('=' * 70)
        continue

# Saving last processed files...
print('SAVING !!!')
print('=' * 70)  
print('Saving processed files...')
print('=' * 70)
print('Data check:', min(melody_chords_f), '===', max(melody_chords_f), '===', len(list(set(melody_chords_f))), '===', len(melody_chords_f))
print('=' * 70)
print('Processed so far:', files_count, 'out of', input_files_count, '===', files_count / input_files_count, 'good files ratio')
print('=' * 70)
count = str(files_count)
TMIDIX.Tegridy_Any_Pickle_File_Writer(melody_chords_f, '/content/drive/MyDrive/Piano_INTs_'+count)

# Displaying resulting processing stats...
print('=' * 70)
print('Done!')   
print('=' * 70)

print('Resulting Stats:')
print('=' * 70)
print('Total good processed MIDI files:', files_count)
print('=' * 70)

print('Instruments stats:')
print('=' * 70)
print('Piano:', stats[0])
print('=' * 70)

"""# (TEST INTS)"""

#@title Test INTs

train_data1 = melody_chords_f

print('Sample INTs', train_data1[:15])

out = train_data1[:200000]

if len(out) != 0:
    
    song = out
    song_f = []
    time = 0
    dur = 0
    vel = 90
    pitch = 0
    channel = 0
                    
    for ss in song:
      
      if ss >= 0 and ss < 256:

          time += ss * 8
        
      if ss >= 256 and ss < 512:

          dur = (ss-256) * 16
          
      if ss >=512 and ss < 640:
          
          pitch = (ss-512)

          song_f.append(['note', time, dur, channel, pitch, vel ])

    detailed_stats = TMIDIX.Tegridy_SONG_to_MIDI_Converter(song_f,
                                                        output_signature = 'DeBussy X',  
                                                        output_file_name = '/content/DeBussy-X-Music-Composition', 
                                                        track_name='Project Los Angeles',
                                                        list_of_MIDI_patches=[0, 24, 32, 40, 42, 46, 56, 65, 73, 0, 53, 19, 0, 0, 0, 0],
                                                        number_of_ticks_per_quarter=500)

    print('Done!')

"""# Congrats! You did it! :)"""